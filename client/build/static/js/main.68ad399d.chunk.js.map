{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Content","Footer","Meta","AppCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","digoutOpen","digoutStatus","serviceName","_this2","fetch","method","headers","Content-Type","mode","cache","body","JSON","stringify","service_name","then","setState","alert","react_default","a","createElement","menu","Item","key","_this3","card","style","width","float","margin","actions","es_button","type","disabled","onClick","digout","name","icon","inspectLogs","dropdown","overlay","renderMoreActions","avatar","src","title","description","Component","App","_this4","services","_this5","res","json","_ref","items","layout","className","theme","defaultSelectedKeys","lineHeight","padding","breadcrumb","background","minHeight","map","s","App_AppCard","id","digout_status","clear","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68ad399d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Dropdown, Layout, Menu, Breadcrumb, Card, Icon, Avatar, Row, Col } from 'antd';\nimport { map } from 'lodash';\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\nconst { Meta } = Card;\n\nclass AppCard extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      digoutOpen: props.digoutStatus === 'Open',\n    };\n  }\n\n  digout(digoutOpen, serviceName) {\n    const action = digoutOpen ? 'dedigout' : 'digout';\n\n    fetch('http://localhost:8081/' + action,{\n      method:'POST',\n      headers:{\n        'Content-Type':'application/json;charset=UTF-8'\n      },\n      mode:'cors',\n      cache:'default',\n      body: JSON.stringify({service_name: serviceName})\n    }).then(() => {\n      this.setState({\n        digoutOpen: !digoutOpen\n      });\n    });\n  }\n\n  inspectLogs() {\n    alert('should redirect to log page');\n  }\n\n  renderMoreActions() {\n    return (\n      <Menu>\n        <Menu.Item key=\"1\">replace docker image</Menu.Item>\n        <Menu.Item key=\"2\">inspect data changes</Menu.Item>\n        <Menu.Item key=\"3\">inspect call tree</Menu.Item>\n        <Menu.Item key=\"3\">login container</Menu.Item>\n      </Menu>\n    );\n  }\n\n  render() {\n    return (\n    <Card\n      style={{ width: 300, float: 'left', margin: '20px' }}\n      actions={[\n        <Button type=\"link\" disabled={this.props.digoutStatus==='Unknown'} onClick={() => this.digout(this.state.digoutOpen, this.props.name) }>\n          <Icon type=\"folder-open\" />\n        </Button>,\n        <Button type=\"link\" onClick={this.inspectLogs}>\n          <Icon type=\"zoom-in\" />\n        </Button>,\n        <Dropdown overlay={this.renderMoreActions}>\n          <Button type=\"link\">\n            <Icon type=\"ellipsis\" />\n          </Button>\n        </Dropdown>\n      ]}\n    >\n      <Meta\n        avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n        title={this.props.name}\n        description={this.props.digoutStatus}\n      />\n    </Card>);\n  }\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      services: [\n      ],\n    };\n  }\n\n  componentDidMount(){\n    fetch('http://localhost:8081/services',{\n      method:'GET',\n      headers:{\n        'Content-Type':'application/json;charset=UTF-8'\n      },\n      mode:'cors',\n      cache:'default'\n    })\n     .then(res =>res.json())\n     .then(({items}) => {\n        this.setState({\n          services: items\n        });\n     }) \n  }\n\n  render() {\n    return (\n    <div>\n      <Layout className=\"layout\">\n        <Header>\n          <div className=\"logo\" />\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={['2']}\n            style={{ lineHeight: '64px' }}\n          >\n            <Menu.Item key=\"1\">Services</Menu.Item>\n            <Menu.Item key=\"2\">Log</Menu.Item>\n            <Menu.Item key=\"3\">Data</Menu.Item>\n            <Menu.Item key=\"4\">Tracing</Menu.Item>\n            <Menu.Item key=\"5\">Mock</Menu.Item>\n            <Menu.Item key=\"6\">Settings</Menu.Item>\n\n          </Menu>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Services</Breadcrumb.Item>\n          </Breadcrumb>\n          <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n            {map(this.state.services, (s) => <AppCard key={s.id} name={s.name} digoutStatus={s.digout_status} />)}\n            <div style={{clear: 'both'}}></div>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Dockerdaydayup Created by xumc</Footer>\n      </Layout>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}